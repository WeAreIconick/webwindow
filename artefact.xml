<?xml version="1.0"?><artefact xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="artefact.xsd" name="WebWindow" slug="webwindow" type="code-package">
  <file name="readme.txt">
    <description>This file contains the readme information for the block. It is used to provide information about the block, its usage, and any other relevant details.</description>
    <content><![CDATA[
=== WebWindow Block ===
Contributors:      w0 block authoring tool
Tags:              block, embed, webview, browser
Stable tag:        0.1.0
License:           GPL-2.0-or-later
License URI:       https://www.gnu.org/licenses/gpl-2.0.html

Bring any website into your page with style! Create seamless, app-like experiences that fit perfectly. No more clunky iframes—just smooth, responsive web embedding that actually works.

== Description ==

The WebWindow block allows editors to embed external web pages directly into posts and pages in a stylish, app-like browser frame.

Features:
* Embed an external webpage by URL
* Scale-to-fit option for previewing the full site in small areas
* Offers more control and adaptability than iframes (within web security limitations)
* Simple block inspector for settings

Note: Due to browser security policies, this block cannot bypass cross-origin restrictions. It will only work with websites that allow their content to be embedded (CORS and X-Frame-Options permitting).

== Installation ==

1. Upload the plugin files to the `/wp-content/plugins/webwindow` directory, or install the plugin through the WordPress plugins screen directly.
2. Activate the plugin through the 'Plugins' screen in WordPress.

== Frequently Asked Questions ==

= Why not use an iframe? =

This block adds improved visual integration and control for embedding web pages as content, letting you scale them to fit and style your embed with a modern browser look.

= Will this work with any website? =

No, only websites that allow their content to be embedded. Some sites block embedding for security or business reasons.

== Screenshots ==

1. Example of an embedded website.
2. Block controls for changing the URL and scaling.

== Changelog ==

= 0.1.0 =
* Initial release of the WebWindow block.

== Arbitrary section ==

For advanced use-cases, developers may extend this block or add server-side rendering as needed.
]]></content>
  </file>
  <file name="webwindow.php">
    <description>This file contains the block registration code in the form of a single block plugin. Any other plugin related functionality should be added to this file. All block rendering functionality should go to the `render.php` file.</description>
    <content><![CDATA[<?php
/**
 * Plugin Name:       WebWindow Block
 * Description:       Bring any website into your page with style! Create seamless, app-like experiences that fit perfectly. No more clunky iframes—just smooth, responsive web embedding that actually works.
 * Version:           0.1.0
 * Author:            w0 block authoring tool
 * License:           GPL-2.0-or-later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       webwindow-block-wp
 *
 * @package Webwindow
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}
/**
 * Registers the block using the metadata loaded from the `block.json` file.
 * Behind the scenes, it registers also all assets so they can be enqueued
 * through the block editor in the corresponding context.
 *
 * @see https://developer.wordpress.org/reference/functions/register_block_type/
 */
function w0_webwindow_block_init() {
	register_block_type( __DIR__ . '/build/' );
}
add_action( 'init', 'w0_webwindow_block_init' );
]]></content>
  </file>
  <file name="block.json">
    <description>This file contains metadata about the block including its name, title, category, icon, and other properties. The icon is a WordPress Dashicon name.</description>
    <content><![CDATA[{
    "$schema": "https://schemas.wp.org/trunk/block.json",
    "apiVersion": 3,
    "name": "w0/webwindow",
    "version": "0.1.0",
    "title": "WebWindow",
    "category": "embed",
    "icon": "media-code",
    "description": "Bring any website into your page with style! Create seamless, app-like experiences that fit perfectly. No more clunky iframes—just smooth, responsive web embedding that actually works.",
    "example": {
        "attributes": {
            "src": "https://demo.iconick.io/twombly/",
            "scaleToFit": true
        }
    },
    "attributes": {
        "src": {
            "type": "string",
            "default": "https://demo.iconick.io/twombly/"
        },
        "scaleToFit": {
            "type": "boolean",
            "default": true
        }
    },
    "supports": {
        "html": false,
        "align": [
            "wide",
            "full"
        ],
        "layout": true
    },
    "textdomain": "webwindow-block-wp",
    "editorScript": "file:./index.js",
    "editorStyle": "file:./index.css",
    "style": "file:./style-index.css",
    "viewScript": "file:./view.js"
}]]></content>
  </file>
  <file name="index.js">
    <description>This file registers the block, specifies the edit and save functions, and loads the block's metadata</description>
    <content><![CDATA[
  /**
 * Registers a new block provided a unique name and an object defining its behavior.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/
 */
import { registerBlockType } from '@wordpress/blocks';

/**
 * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.
 * All files containing `style` keyword are bundled together. The code used
 * gets applied both to the front of your site and to the editor.
 *
 * @see https://www.npmjs.com/package/@wordpress/scripts#using-css
 */
import './style.scss';

/**
 * Internal dependencies
 */
import Edit from './edit';
import save from './save';
import metadata from './block.json';

/**
 * Every block starts by registering a new block type definition.
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-registration/
 */
registerBlockType( metadata.name, {
	/**
	 * @see ./edit.js
	 */
	edit: Edit,

	/**
	 * @see ./save.js
	 */
	save,
} );
	]]></content>
  </file>
  <file name="edit.js">
    <description>This file contains the edit function for the block which is responsible for rendering the block in the editor.</description>
    <content><![CDATA[/*
 * Retrieves the translation of text.
 */
import { __ } from '@wordpress/i18n';
import { useBlockProps, InspectorControls } from '@wordpress/block-editor';
import { PanelBody, TextControl, ToggleControl, Notice, Button, Panel } from '@wordpress/components';
import { useState, useEffect, useRef } from '@wordpress/element';

const IDEAL_SITE_WIDTH = 1440;
const IDEAL_SITE_HEIGHT = 900;

export default function Edit( { attributes, setAttributes } ) {
	const { src, scaleToFit } = attributes;
	const [ error, setError ] = useState(false);
	const iframeRef = useRef();
	const wrapperRef = useRef();
	const [ scale, setScale ] = useState(1);
	const [ scaledHeight, setScaledHeight ] = useState(IDEAL_SITE_HEIGHT);

	// Dynamically calculate scaled height based on parent width, maintain aspect ratio
	useEffect( () => {
		if ( !scaleToFit ) {
			setScale(1);
			setScaledHeight(IDEAL_SITE_HEIGHT);
			return;
		}
		function calculateScale() {
			if ( !wrapperRef.current ) return;
			const parentWidth = wrapperRef.current.offsetWidth || 600;
			const s = Math.min( 1, parentWidth / IDEAL_SITE_WIDTH );
			setScale(s);
			setScaledHeight(Math.round(IDEAL_SITE_HEIGHT * s));
		}
		calculateScale();
		window.addEventListener('resize', calculateScale);
		return () => window.removeEventListener('resize', calculateScale);
	}, [ scaleToFit ] );

	const handleIframeError = () => {
		setError(true);
	};

	let iframeStyles;
	if ( scaleToFit ) {
		iframeStyles = {
			width: IDEAL_SITE_WIDTH + 'px',
			height: IDEAL_SITE_HEIGHT + 'px',
			border: error ? '2px solid #f00' : '1px solid #ddd',
			background: '#fff',
			transform: `scale(${scale})`,
			transformOrigin: 'top left',
			display: 'block',
			overflow: 'hidden',
		};
	} else {
		iframeStyles = {
			width: '100%',
			minHeight: 400,
			border: error ? '2px solid #f00' : '1px solid #ddd',
			background: '#fff',
			display: 'block',
			overflow: 'auto',
		};
	}

	let frameContainerStyles = {};
	if ( scaleToFit ) {
		frameContainerStyles = {
			width: '100%',
			height: scaledHeight + 'px',
			maxWidth: '100%',
			overflow: 'hidden',
			position: 'relative',
			background: '#fff',
		};
	}

	return (
		<div { ...useBlockProps() }>
			<InspectorControls>
				<PanelBody title={ __( 'WebWindow Settings', 'webwindow-block-wp' ) } initialOpen={ true }>
					<TextControl
						label={ __( 'Webpage URL', 'webwindow-block-wp' ) }
						value={ src }
						onChange={ ( value ) => setAttributes( { src: value } ) }
						placeholder="https://demo.iconick.io/twombly/"
					/>
					<ToggleControl
						label={ __( 'Scale to Fit (show full site even when small)', 'webwindow-block-wp' ) }
						checked={ scaleToFit }
						onChange={ ( value ) => setAttributes( { scaleToFit: value } ) }
						help={ __( 'Zooms out the embedded page so more of the full site is visible. May reduce readability & interactivity!', 'webwindow-block-wp' ) }
					/>
				</PanelBody>
				<PanelBody title={ __( 'Powered by Telex', 'webwindow-block-wp' ) } initialOpen={ false }>
					<p style={{ marginBottom: '10px' }}>
						Telex is basically the J.A.R.V.I.S of WordPress development - an AI that builds blocks so you don't have to.
					</p>
					<a
						href="https://telex.automattic.ai"
						target="_blank"
						rel="noopener noreferrer"
						style={ {
							display: 'inline-block',
							marginTop: '4px',
							marginBottom: '4px',
							color: '#2c77f5',
							fontWeight: 500,
							textDecoration: 'underline',
						} }
					>
						Learn more about Telex
					</a>
				</PanelBody>
			</InspectorControls>

			<div
				className={ `webwindow-block-embed browser-frame` }
				ref={wrapperRef}
			>
				<div className="browser-frame-bar">
					<span className="browser-frame-dot red"></span>
					<span className="browser-frame-dot yellow"></span>
					<span className="browser-frame-dot green"></span>
					<span className="browser-frame-url">
						{ src ? src : '' }
					</span>
					{ src && (
						<Button
							className="browser-frame-open-button"
							icon="external"
							label={ __( 'Open full site in new tab', 'webwindow-block-wp' ) }
							variant="tertiary"
							onClick={ () => window.open( src, '_blank', 'noopener noreferrer' ) }
							style={{ marginLeft: 'auto', marginRight: 0, lineHeight: '1.2', padding: '2px 9px', fontSize: '14px' }}
						/>
					) }
				</div>
				<div className="webwindow-iframe-outer" style={ frameContainerStyles }>
					{ src && (
						<iframe
							ref={iframeRef}
							title={ __( 'Embedded Web Page', 'webwindow-block-wp' ) }
							src={ src }
							onError={ handleIframeError }
							style={ iframeStyles }
							sandbox="allow-scripts allow-forms allow-same-origin allow-popups"
						/>
					) }
				</div>
				{ ( src && error ) && (
					<Notice status="warning" isDismissible={ false }>
						{ __( 'Could not display this page (site does not allow embedding, or it is unavailable).', 'webwindow-block-wp' ) }
					</Notice>
				) }
				{ !src && (
					<div className="webwindow-block-empty" style={ { padding: '20px 0', textAlign: 'center', color: '#6a6e74', background: '#fbfcfd' } } />
				) }
			</div>
		</div>
	);
}]]></content>
  </file>
  <file name="save.js">
    <description>This file contains the save function for the block which is responsible for creating the static result of rendering the block on the client to display the saved result on the front end.</description>
    <content><![CDATA[/**
 * React hook that is used to mark the block wrapper element.
 */
import { useBlockProps } from '@wordpress/block-editor';

/**
 * The save function defines the final markup, attributes are hydrated by the view.js for interactivity.
 */
export default function save( { attributes } ) {
	const { src, scaleToFit } = attributes;
	return (
		<div
			{ ...useBlockProps.save() }
			data-src={ src }
			data-scale-to-fit={ scaleToFit ? '1' : '0' }
		>
			<div className={ `webwindow-block-embed browser-frame` }>
				<div className="browser-frame-bar">
					<span className="browser-frame-dot red"></span>
					<span className="browser-frame-dot yellow"></span>
					<span className="browser-frame-dot green"></span>
					<span className="browser-frame-url">
						{ src ? src : '' }
					</span>
					{ src && (
						// eslint-disable-next-line jsx-a11y/anchor-has-content
						<a
							href={ src }
							className="browser-frame-open-button"
							target="_blank"
							rel="noopener noreferrer"
							title="Open full site in new tab"
						>
							&#8599;
						</a>
					) }
				</div>
				{/* The JS-based enhancement and scaling will be handled on frontend by view.js */}
				<noscript>
					{ src ? (
						<iframe
							title="Embedded Web Page (noscript fallback)"
							src={ src }
							style={ { width: '100%', minHeight: 400, border: '1px solid #ccc' } }
							sandbox="allow-scripts allow-forms allow-same-origin allow-popups"
						/>
					) : null }
				</noscript>
				<div className="webwindow-iframe-outer"></div>
				{ !src && (
					<div className="webwindow-block-empty" style={ { padding: '20px 0', textAlign: 'center', color: '#6a6e74', background: '#fbfcfd' } } />
				) }
			</div>
		</div>
	);
}]]></content>
  </file>
  <file name="style.scss">
    <description>This file contains styles for the block in the front end.</description>
    <content><![CDATA[/*
 * Styles for the WebWindow block frontend with strict 16:9 aspect ratio.
 */
.wp-block-w0-webwindow {
	max-width: 100%;
}

.webwindow-block-embed {
	width: 100%;
	background: #fff;
	border-radius: 6px;
	overflow: hidden;
	position: relative;
	box-shadow: 0 2px 16px 0 rgba(0,0,0,0.08);
}

.webwindow-iframe-outer {
	width: 100%;
	aspect-ratio: 16 / 9;
	background: #fff;
	position: relative;
	overflow: hidden;
}

.webwindow-block-empty {
	font-size: 1.1em;
	display: flex;
	justify-content: center;
	align-items: center;
	width: 100%;
	aspect-ratio: 16 / 9;
	background: #fbfcfd;
	color: #6a6e74;
	/* No min-height/height rules, remove vertical stretching */
}

.webwindow-spinner {
	display: flex;
	align-items: center;
	justify-content: center;
	gap: 8px;
	font-size: 1.1em;
	background: #fafcff;
	color: #21759b;
	padding: 1em;
}

.webwindow-block-embed.scale-to-fit {
	position: relative;
	background: #fff;
	overflow: hidden;
}

.webwindow-block-embed.scale-to-fit .webwindow-iframe-outer {
	width: 100%;
	aspect-ratio: 16 / 9;
	margin: 0 auto;
	position: relative;
	background: #fff;
	overflow: hidden;
}

/* Browser Frame Styles */
.browser-frame {
	border-radius: 8px;
	box-shadow: 0 4px 32px rgba(0,0,0,0.07);
	border: 1px solid #e4e7ea;
	background: #f7f8fa;
	aspect-ratio: 16 / 9;
	/* No min-height/height rules, so aspect-ratio takes precedence */
	display: flex;
	flex-direction: column;
}
.browser-frame-bar {
	display: flex;
	align-items: center;
	justify-content: flex-start;
	gap: 0.5em;
	min-height: 36px;
	height: auto;
	background: linear-gradient(180deg,#ebeef3 0%,#f6f7fa 100%);
	border-bottom: 1px solid #e4e7ea;
	padding: 0 12px;
	position: relative;
	box-sizing: border-box;
}
.browser-frame-dot {
	display: inline-block;
	width: 12px;
	height: 12px;
	border-radius: 50%;
	margin-right: 4px;
}
.browser-frame-dot.red { background: #ff6053; border: 1px solid #e06666; }
.browser-frame-dot.yellow { background: #ffbd44; border: 1px solid #f6d155; }
.browser-frame-dot.green { background: #00ca4e; border: 1px solid #83c993; }

.browser-frame-url {
	font-size: 0.97em;
	margin-left: 1.2em;
	color: #6a6e74;
	white-space: nowrap;
	text-overflow: ellipsis;
	overflow: hidden;
	max-width: 65%;
	flex-shrink: 1;
}

.browser-frame-open-button {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	margin-left: auto;
	color: #3575e8;
	background: none;
	border: none;
	font-weight: 500;
	cursor: pointer;
	text-decoration: none;
	transition: color 0.16s;
	padding: 3px 14px 3px 14px;
	border-radius: 4px;
	font-size: 1em;
	line-height: 1.15em;
}
.browser-frame-open-button:hover {
	background: #f2f4fa;
	color: #174fa8;

}
]]></content>
  </file>
  <file name="editor.scss">
    <description>This file contains styles for the block in the editor.</description>
    <content><![CDATA[/*
 * Editor styles for the WebWindow block with 16:9 aspect ratio.
 */
.wp-block-w0-webwindow {
	border: 1px dashed #21759b;
	padding: 4px;
	background: #f4fafd;
	margin-bottom: 6px;
}

.webwindow-block-empty {
	font-size: 1.1em;
	width: 100%;
	display: flex;
	justify-content: center;
	align-items: center;
	aspect-ratio: 16 / 9;
	background: #fbfcfd;
	color: #6a6e74;
	/* No min-height/height rules, remove vertical stretching */
}

.webwindow-spinner {
	color: #4f8edc;
	font-weight: 500;
}

.webwindow-block-embed.scale-to-fit {
	position: relative;
	background: #fff;
	overflow: hidden;
}

.webwindow-block-embed.scale-to-fit .webwindow-iframe-outer {
	width: 100%;
	aspect-ratio: 16 / 9;
	margin: 0 auto;
	position: relative;
	background: #fff;
	overflow: hidden;
}

.webwindow-iframe-outer {
	width: 100%;
	aspect-ratio: 16 / 9;
	background: #fff;
	position: relative;
	overflow: hidden;
}

/* Browser Frame Look for Editor */
.browser-frame {
	border-radius: 8px;
	box-shadow: 0 4px 32px rgba(0,0,0,0.10);
	border: 1px solid #d6dae1;
	background: #f7f8fa;
	aspect-ratio: 16 / 9;
	/* No min-height/height rules, so aspect-ratio takes precedence */
	display: flex;
	flex-direction: column;
}
.browser-frame-bar {
	display: flex;
	align-items: center;
	justify-content: flex-start;
	gap: 0.5em;
	min-height: 36px;
	height: auto;
	background: linear-gradient(180deg,#ebeef3 0%,#f6f7fa 100%);
	border-bottom: 1px solid #ebeef3;
	padding: 0 12px;
	position: relative;
	box-sizing: border-box;
}
.browser-frame-dot {
	display: inline-block;
	width: 12px;
	height: 12px;
	border-radius: 50%;
	margin-right: 4px;
}
.browser-frame-dot.red { background: #ff6053; border: 1px solid #e06666; }
.browser-frame-dot.yellow { background: #ffbd44; border: 1px solid #f6d155; }
.browser-frame-dot.green { background: #00ca4e; border: 1px solid #83c993; }

.browser-frame-url {
	font-size: 0.97em;
	margin-left: 1.1em;
	color: #6a6e74;
	white-space: nowrap;
	text-overflow: ellipsis;
	overflow: hidden;
	max-width: 62%;
	flex-shrink: 1;
}

.browser-frame-open-button {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	margin-left: auto;
	color: #3575e8;
	background: none;
	border: none;
	font-weight: 500;
	cursor: pointer;
	text-decoration: none;
	transition: color 0.16s;
	padding: 3px 14px 3px 14px;
	border-radius: 4px;
	font-size: 1em;
	line-height: 1.15em;
}
.browser-frame-open-button:hover {
	background: #f2f4fa;
	color: #174fa8;
}
]]></content>
  </file>
  <file name="view.js">
    <description>This file contains the view function for the block which is responsible for rendering interactive behaviors of the block on the front end. Ideally using the WordPress interactivity API.</description>
    <content><![CDATA[/**
 * Adds scale-to-fit for embedded pages on the frontend.
 */
(function () {
	const IDEAL_SITE_WIDTH = 1440;
	const IDEAL_SITE_HEIGHT = 900;
	const blocks = document.querySelectorAll('.wp-block-w0-webwindow[data-src]');
	blocks.forEach(block => {
		const src = block.getAttribute('data-src');
		const scaleToFit = block.getAttribute('data-scale-to-fit') === '1';
		if (block.querySelector('.webwindow-js-iframe')) return;
		if (!src) return;
		const outer = block.querySelector('.webwindow-block-embed');
		if (!outer) return;
		const iframeContainer = outer.querySelector('.webwindow-iframe-outer');

		function updateScaleAndCenter(iframe, container) {
			if (!iframe || !container) return;
			var parentWidth = container.offsetWidth || 600;
			var scale = Math.min(1, parentWidth / IDEAL_SITE_WIDTH);
			iframe.style.transform = 'scale(' + scale + ')';
			iframe.style.transformOrigin = 'top left';
			container.style.height = (IDEAL_SITE_HEIGHT * scale) + 'px';
			iframe.style.display = 'block';
			iframe.style.overflow = 'hidden';
		}

		function loadIframe(src) {
			let wrapper = iframeContainer || outer;
			const iframe = document.createElement('iframe');
			iframe.className = 'webwindow-js-iframe';
			iframe.title = 'Embedded Web Page';
			iframe.src = src;
			if (scaleToFit) {
				iframe.style.width = IDEAL_SITE_WIDTH + 'px';
				iframe.style.height = IDEAL_SITE_HEIGHT + 'px';
				iframe.style.border = '1px solid #ddd';
				iframe.style.display = 'block';
				iframe.style.overflow = 'hidden';
				setTimeout(function () {
					updateScaleAndCenter(iframe, wrapper);
				}, 10);
			} else {
				iframe.style.width = '100%';
				iframe.style.minHeight = '400px';
				iframe.style.border = '1px solid #ddd';
				iframe.style.overflow = 'auto';
			}
			iframe.sandbox = 'allow-scripts allow-forms allow-same-origin allow-popups';
			iframe.onerror = function () {
				const warning = document.createElement('div');
				warning.className = 'webwindow-notice';
				warning.style.background = '#fffbe5';
				warning.style.borderLeft = '4px solid #ffb900';
				warning.style.margin = '8px 0';
				warning.style.padding = '8px 12px';
				warning.style.fontSize = '0.95em';
				warning.innerText = 'Could not display this page (site does not allow embedding, or it is unavailable).';
				outer.appendChild(warning);
				setTimeout(function () { try { outer.removeChild(warning); } catch(e){} }, 3500);
			};
			wrapper.appendChild(iframe);
			if (scaleToFit) {
				window.addEventListener('resize', function scaledResizeHandler() {
					if (document.body.contains(iframe)) {
						updateScaleAndCenter(iframe, wrapper);
					} else {
						window.removeEventListener('resize', scaledResizeHandler);
					}
				});
			}
		}
		loadIframe(src);
	});
})();
/* eslint-enable no-console */
]]></content>
  </file>
  <file name="render.php">
    <description>This file contains the render callback function for the block, which is responsible for rendering the block content on the front end. A render function should exist only if the block is dynamic.</description>
    <content><![CDATA[]]></content>
  </file>
  <file name="package.json">
    <description>The AI assistant should only edit 'user_provided_block_name_slug', 'description' and resolve 'isDynamicVariant' in this file and ALWAYS INCLUDE IT. This file includes the necessary scripts for building, formatting, and linting the block code. Dependencies are managed at the workspace level via pnpm.</description>
    <content><![CDATA[{
    "name": "webwindow",
    "version": "0.1.0",
    "description": "Bring any website into your page with style! Create seamless, app-like experiences that fit perfectly. No more clunky iframes—just smooth, responsive web embedding that actually works.",
    "author": "w0 block authoring tool",
    "license": "GPL-2.0-or-later",
    "main": "build/index.js",
    "scripts": {
        "build": "wp-scripts build --webpack-copy-php",
        "format": "wp-scripts format",
        "lint:css": "wp-scripts lint-style",
        "lint:js": "wp-scripts lint-js",
        "packages-update": "wp-scripts packages-update",
        "plugin-zip": "wp-scripts plugin-zip",
        "start": "wp-scripts start --blocks-manifest"
    }
}]]></content>
  </file>
</artefact>